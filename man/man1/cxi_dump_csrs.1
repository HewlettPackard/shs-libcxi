.\" Automatically generated by Pandoc 2.17.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "CXI_DUMP_CSRS" "1" "2022-10-06" "Version 1.0.0" "CXI Diagnostics and Utilities"
.hy
.SH NAME
.PP
cxi_dump_csrs - Dump Cassini registers into a file
.SH SYNOPSIS
.PP
\f[B]cxi_dump_csrs\f[R] [\f[B]-d\f[R] \f[I]DEV\f[R]]
.SH DESCRIPTION
.PP
\f[B]cxi_dump_csrs\f[R] will dump CSRs into a file for further analysis.
It will contain most data of a running board, including command queues
states or counters.
.PP
The name of the file generated contains the name of the Cassini device,
and the date, in Unix format, it was generated.
For instance:
.IP
.nf
\f[C]
cxi0-csrs-1665092478.bin
\f[R]
.fi
.PP
The content of that file can then be analyzed with \f[V]cxiutil\f[R],
from the pycxi package:
.IP
.nf
\f[C]
$ cxiutil dump csr sts_rev --file=cxi0-csrs-1665092478.bin
      c_mb_sts_rev    hex       dec.
      --------------  ------  ------
      rev             0x1          1
      device_id       0x501     1281
      vendor_id       0x17db    6107
      proto           0x0          0
      platform        0x0          0
\f[R]
.fi
.SH OPTIONS
.TP
\f[B]-d, --device\f[R]=\f[I]DEV\f[R]
The Cassini NIC device name to use.
When unspecified, \[dq]cxi0\[dq] is used.
