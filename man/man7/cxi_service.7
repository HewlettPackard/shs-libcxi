.\" Automatically generated by Pandoc 2.18
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "CXI_SERVICE" "7" "2022-07-11" "Version 1.0.0" "Cassini Service API"
.hy
.SH NAME
.PP
Cassini Service API
.SH SYNOPSIS
.PP
An API for configuring a Cassini NIC to take advantage of:
.IP \[bu] 2
Network Application Isolation (VNIs)
.IP \[bu] 2
Traffic Classes (TCs)
.IP \[bu] 2
Access Control
.IP \[bu] 2
Local Resource Partitioning
.SH DESCRIPTION
.PP
A CXI Service is a container of requirements and rules for any entity
that needs to utilize a Cassini NIC.
It defines:
.IP \[bu] 2
Which specific NIC resources are needed and how many.
.IP \[bu] 2
What traffic classes can be utilized.
.IP \[bu] 2
Which VNIs can be used.
.IP \[bu] 2
Which users or groups should be allowed to access the aforementioned
resources.
.PP
In other words, it defines the level of service needed by some set of
users or apps.
.PP
This API is made available through libcxi, and is used on a per NIC
basis.
.SS Interfaces
.PP
\f[I]cxil_alloc_svc()\f[R] - Allocate a CXI Service.
.PP
\f[I]cxil_destroy_svc()\f[R] - Destroy a CXI Service, frees any reserved
resources.
.PP
\f[I]cxil_update_svc()\f[R] - Updates a CXI Service.
.PP
\f[I]cxil_get_svc()\f[R] - Given a service ID, get a copy of the
associated service descriptor.
.PP
\f[I]cxil_get_svc_list()\f[R] - Get a list of all service descriptors.
.PP
\f[I]cxil_free_svc_list()\f[R] - Free list allocated by
cxil_get_svc_list().
.PP
\f[I]cxil_get_svc_rsrc_use()\f[R] - Given a service ID, get resource
usage information for the service.
.PP
\f[I]cxil_get_svc_rsrc_list()\f[R] - Get resource usage information for
all services.
.PP
\f[I]cxil_free_svc_rsrc_list()\f[R] - Free list allocated by
cxil_get_svc_rsrc_list().
.PP
\f[I]cxil_svc_enable()\f[R] - Enable/Disable a CXI Service.
.PP
\f[I]cxil_svc_set_exclusive_cp()\f[R] - Set the exclusive_cp bit for the
CXI Service.
.PP
\f[I]cxil_svc_get_exclusive_cp()\f[R] - Get the exclusive_cp bit for the
CXI Service.
.PP
\f[I]cxil_svc_set_vni_range()\f[R] - Set a VNI range for a CXI service.
.PP
\f[I]cxil_svc_get_vni_range()\f[R] - Get the VNI range for a CXI
service.
.IP "1." 3
\f[B]Default service\f[R]
.PP
The Cassini driver provides a \[lq]default service\[rq] (ID: 1), which
provides unfettered access to a Cassini NIC.
It provides access to all NIC resources, allows use of any VNI or TC,
and all users and groups may utilize it.
.PP
This default service can be useful for validation purposes, but it is
inherently unsafe.
Admins may enable or disable this default service by using the
\f[I]cxi_service\f[R] command line utility.
.IP "2." 3
\f[B]Allocating a service\f[R] - \f[I]cxil_alloc_svc()\f[R]
.IP
.nf
\f[C]
int cxil_alloc_svc(struct cxil_dev *dev_in,
                   const struct cxi_svc_desc *desc,
                   struct cxi_svc_fail_info *fail_info);
\f[R]
.fi
.PP
This function is used to allocate a CXI service.
Service allocation is a privileged operation that requires the
capability CAP_SYS_ADMIN.
The caller must first fill out a service descriptor
(\f[I]cxi_svc_desc\f[R]) to define the rules and requirements for the
service they wish to allocate.
This descriptor is passed to the kernel which determines if all the
requests in the descriptor can be honored.
.PP
Upon success a service ID greater than 0 is returned.
Otherwise a negative errno value is returned indicating the error.
If the failure was due to a lack of requested HW resources, the struct
\f[I]cxi_svc_fail_info\f[R], will contain detailed information about
resources that could not be successfully reserved.
.PP
The example below would request a service with no rules or limitations,
like the default service.
.IP
.nf
\f[C]
struct cxi_svc_fail_info fail_info = {};
struct cxi_svc_desc svc_desc = {};
rc = cxil_alloc_svc(dev, &svc_desc, &fail_info);
\f[R]
.fi
.PP
2.1 \f[B]Service descriptor\f[R] - \f[I]cxi_svc_desc\f[R]
.PP
The struct cxi_svc_desc is the container of requests made to the Cassini
driver.
.IP
.nf
\f[C]
struct cxi_svc_desc {
         uint8_t
                 /* Limit access to member processes */
                 restricted_members:1,

                 /* Limit access to defined VNIs */
                 restricted_vnis:1,

                 /* Limit access to defined TCs */
                 restricted_tcs:1,

                 /* Limit access to resources */
                 resource_limits:1,

                 /* Whether a service should be enabled.
                  * Services are enabled by default upon creation.
                  */
                 enable:1,

                 /* Differentiates system and user services */
                 is_system_svc:1,

                 /* Counter Pool ID - Unimplemented, field currently ignored */
                 cntr_pool_id:2;

         /* How many VNIs provided by the user are valid.
          * Must be non-zero if restricted_vnis is true.
          */
         uint8_t num_vld_vnis;

         /* VNIs allowed by this service */
         uint16_t vnis[CXI_SVC_MAX_VNIS];

         bool tcs[CXI_TC_MAX];

         struct {
                 union cxi_svc_member {
                         __kernel_uid_t  uid;
                         __kernel_gid_t  gid;
                 } svc_member;
                 enum cxi_svc_member_type type;
         } members[CXI_SVC_MAX_MEMBERS];

         struct cxi_rsrc_limits limits;

         unsigned int svc_id;
 };
\f[R]
.fi
.PP
Common settings that can be requested when allocating a service are
described below.
.PP
2.1.1 \f[B]Restricting members\f[R]
.PP
A service can be allocated that limits access to specific UIDs or GIDs.
A combination of CXI_SVC_MAX_MEMBERS UIDs or GIDs may be provided.
To do so, set \[lq]restricted_members=1\[rq] and fill out the
\[lq]members\[rq] structure.
.IP
.nf
\f[C]
/* SVC Member */
struct {
        union cxi_svc_member {
                __kernel_uid_t  uid;
                __kernel_gid_t  gid;
        } svc_member;
        enum cxi_svc_member_type type;
} members[CXI_SVC_MAX_MEMBERS];
\f[R]
.fi
.IP
.nf
\f[C]
/* SVC Member Types */
enum cxi_svc_member_type {
    CXI_SVC_MEMBER_IGNORE,
    CXI_SVC_MEMBER_UID,
    CXI_SVC_MEMBER_GID,

    CXI_SVC_MEMBER_MAX,
};
\f[R]
.fi
.PP
For example, to limit use of this service to users that belong to group
100, set up the service descriptor as follows:
.IP
.nf
\f[C]
struct cxi_svc_desc svc_desc = {};
svc_desc.restricted_members = 1;
svc_desc.members[0].svc_member.gid = 100;
svc_desc.members[0].type = CXI_SVC_MEMBER_GID;
\f[R]
.fi
.PP
2.1.2 \f[B]Restricting traffic classes\f[R]
.PP
A service can be created that limits access to specific HPC Traffic
Classes.
A value of true written to an index in the boolean array \[lq]tcs\[rq]
indicates that a particular TC should be enabled for a service.
.IP
.nf
\f[C]
enum cxi_traffic_class {
    /* HRP traffic classes. */
    CXI_TC_DEDICATED_ACCESS,
    CXI_TC_LOW_LATENCY,
    CXI_TC_BULK_DATA,
    CXI_TC_BEST_EFFORT,

    /* Ethernet specific traffic class. */
    CXI_TC_ETH,
    CXI_TC_MAX,
}
\f[R]
.fi
.PP
For example, to enable the BEST_EFFORT and DEDICATED_ACCESS traffic
classes, set up the service descriptor as follows:
.IP
.nf
\f[C]
struct cxi_svc_desc svc_desc = {};
svc_desc.restricted_tcs = 1;
svc_desc.tcs[CXI_TC_DEDICATED_ACCESS] = true;
svc_desc.tcs[CXI_TC_BEST_EFFORT] = true;
\f[R]
.fi
.PP
2.1.3 \f[B]VNIs\f[R]
.PP
A service can either specify up to 4 distinct VNIs or 1 VNI
\[lq]Range\[rq].
The \[lq]restricted_vnis\[rq] bit in the CXI Service descriptor controls
this behavior.
.PP
2.1.3.1 \f[B]VNI Range\f[R]
.PP
A VNI Range is a contiguous block of VNIs that can be used for
communication.
.PP
Workflow/Requirements to set a VNI range:
.IP \[bu] 2
The number of values in the range must be a power of two (1, 2, 4, 8,
16, \&...).
.IP \[bu] 2
The first value in the range (vni_min) must be a multiple of the range
size.
.IP \[bu] 2
VNI Range size is (vni_max - vni_min + 1).
.IP \[bu] 2
The CXI Service should be set up with restricted_vnis=0.
This will result in a CXI Service that is created in a disabled state.
.IP \[bu] 2
A subsequent call to cxil_svc_set_vni_range() sets the desired VNI range
and enables the CXI Service.
.PP
2.1.3.2 \f[B]Restricting VNI\f[R]
.PP
A service can be created that limits access to certain VNIs.
Up to CXI_SVC_MAX_VNIS VNIs can be specified.
Users must explicitly indicate how many VNIs they wish to utilize.
.PP
For example, to limit a service to only have access to VNIs 1 and 2 set
up the service descriptor as follows:
.IP
.nf
\f[C]
struct cxi_svc_desc svc_desc = {};
svc_desc.restricted_vnis = 1;
svc_desc.num_vld_vnis = 2
svc_desc.vnis[0] = 1;
svc_desc.vnis[1] = 2;
\f[R]
.fi
.PP
2.1.4 \f[B]Restricting resources\f[R]
.PP
There are many Cassini HW resources that are essential for jobs to
function properly.
These resources initially belong to a shared pool.
Resources may be reserved for use exclusively by a particular service.
Similarly it is possible to cap the amount of a resources that a service
can utilize.
.PP
Relevant structures:
.IP
.nf
\f[C]
enum cxi_rsrc_type {
         CXI_RSRC_TYPE_PTE,
         CXI_RSRC_TYPE_TXQ,
         CXI_RSRC_TYPE_TGQ,
         CXI_RSRC_TYPE_EQ,
         CXI_RSRC_TYPE_CT,
         CXI_RSRC_TYPE_LE,
         CXI_RSRC_TYPE_TLE,
         CXI_RSRC_TYPE_AC,

         CXI_RSRC_TYPE_MAX,
};
\f[R]
.fi
.IP
.nf
\f[C]
struct cxi_limits {
         uint16_t max;
         uint16_t res;
};
\f[R]
.fi
.IP
.nf
\f[C]
struct cxi_rsrc_limits {
        union {
                struct {
                        struct cxi_limits ptes;
                        struct cxi_limits txqs;
                        struct cxi_limits tgqs;
                        struct cxi_limits eqs;
                        struct cxi_limits cts;
                        struct cxi_limits les;
                        struct cxi_limits tles;
                        struct cxi_limits acs;
                };
                struct cxi_limits type[CXI_RSRC_TYPE_MAX];
        };
};
\f[R]
.fi
.PP
Example:
.IP
.nf
\f[C]
struct cxi_rsrc_limits = {
    .txqs = {
        .max = 1024,
                .res = 1024,
        },
        .eqs = {
            .max = 10,
                .res = 5,
        },
};
struct cxi_svc_fail_info fail_info = {};
struct cxi_svc_desc svc_desc = {
    .resource_limits = 1,
    .limits = limits,
};
\f[R]
.fi
.PP
Setting max=0 would disallow usage of a particular resource.
Hence (unlike the contrived example above) max values should be
explicitly specified for each resource type.
.PP
To see how many resources are advertised by a Cassini NIC, refer to
\f[I]struct cxil_dev_info\f[R] which contains information about each
resource.
.PP
Unlike other resources, LE and TLE reservations are backed by a limited
number of HW \[lq]pools\[rq].
There are 16 LE pools and 4 TLE pools.
This means only 16 services can be created that reserve LEs, and only 4
services can be created that reserve TLEs.
.PP
2.1.5 \f[B]Exclusive CP\f[R]
.PP
The exclusive_cp bit disables sharing of Communication Profiles (CP).
Exclusive CP is not allowed if \[lq]restricted_vnis\[rq] bit is set in
the CXI service descriptor.
.PP
2.2 \f[B]Fail info\f[R] - \f[I]cxi_fail_info\f[R]
.PP
If service allocation fails due to lack of resource availability
(-ENOSPC), detailed information about which resources were unavailable
is provided in the struct \f[I]cxi_fail_info\f[R].
.IP
.nf
\f[C]
 struct cxi_svc_fail_info {
         /* If a reservation was requested for a CXI_RSRC_TYPE_X and allocation
          * failed, its entry in this array will reflect how many of said
          * resource were actually available to reserve.
          */
         uint16_t rsrc_avail[CXI_RSRC_TYPE_MAX];

         /* True if relevant resources were requested, but none were available. */
         bool no_le_pools;
         bool no_tle_pools;
         bool no_cntr_pools;
 };
\f[R]
.fi
.PP
The information in this structure is only valid for resources that were
actually requested.
If a user attempted to reserve LEs but not ACs,
fail_info.rsrc_avail[CXI_RSRC_TYPE_LE] would contain valid info, but
fail_info.rsrc_avail[CXI_RSRC_TYPE_AC] should not be referenced.
.PP
If cxil_alloc_svc returned a valid svc_id, fail_info should not be
referenced.
.IP "3." 3
\f[B]Deleting a service\f[R] - \f[I]cxil_destroy_svc()\f[R]
.IP
.nf
\f[C]
cxil_destroy_svc(struct cxil_dev *dev, unsigned int svc_id);
\f[R]
.fi
.PP
This function is used to destroy a CXI service.
Service deletion is a privileged operation that requires the capability
CAP_SYS_ADMIN.
Destroying a service will release any reserved resources associated with
the service back to a shared pool that can by utilized by other
services.
.PP
Upon success 0 is returned.
Otherwise a negative errno value is returned indicating the error.
.PP
A service cannot be destroyed if there are still active references to
it, i.e.\ no allocated LNIs may reference this service.
In addition, the default service cannot be deleted.
However, the default service may be disabled via the
\f[I]cxi_service\f[R] command line utility.
.IP "4." 3
\f[B]Updating a service\f[R] - \f[I]cxil_update_svc()\f[R]
.IP
.nf
\f[C]
cxil_update_svc(struct cxil_dev *dev,
                const struct cxi_svc_desc *desc,
                struct cxi_svc_fail_info *fail_info);
\f[R]
.fi
.PP
This function is used to update an existing CXI service.
Updating a service is a privileged operation that requires the
capability CAP_SYS_ADMIN.
.PP
The usage of this function mirrors \f[I]cxil_alloc_svc()\f[R].
A user fills out a service descriptor with the needed changes to an
existing service.
Typically a user should first call \f[I]cxil_get_svc()\f[R] to get the
latest version of a descriptor from the kernel, make necessary changes
in the returned copy of the descriptor, then finally call
\f[I]cxil_update_svc()\f[R].
.PP
Modifications to resource reservations are not currently supported.
The \f[I]cxi_service\f[R] command line tool provides a simple wrapper to
update a service.
.IP "5." 3
\f[B]Get a service descriptor from service ID\f[R] -
\f[I]cxil_get_svc()\f[R]
.IP
.nf
\f[C]
cxil_get_svc(struct cxil_dev *dev, unsigned int svc_id,
             struct cxi_svc_desc *svc_desc);
\f[R]
.fi
.PP
If a valid service ID is passed into this function, information about
the service is stored into the provided service descriptor.
If no service is found with the provided ID, an error is returned.
.PP
Example:
.IP
.nf
\f[C]
int rc;
struct cxi_svc_desc desc;
rc = cxil_get_svc(dev, CXI_DEFAULT_SVC_ID, &desc);
\f[R]
.fi
.IP "6." 3
\f[B]Get a list of all service descriptors\f[R] -
\f[I]cxil_get_svc_list()\f[R]
.IP
.nf
\f[C]
int cxil_get_svc_list(struct cxil_dev *dev,
                      struct cxil_svc_list **svc_list);
\f[R]
.fi
.PP
This function will query the driver for information about all services
associated with a given device.
Memory will be allocated on the users behalf for the service list.
The \[lq]count\[rq] field will indicate how many service descriptors
have been copied in.
Must call \f[I]cxil_free_svc_list()\f[R] to free memory during cleanup.
.IP
.nf
\f[C]
struct cxil_svc_list {
    unsigned int count;
    struct cxi_svc_desc descs[];
};
\f[R]
.fi
.PP
Example:
.IP
.nf
\f[C]
int rc;
struct cxil_svc_list *list = NULL;
rc = cxil_get_svc_list(dev, &list);
\f[R]
.fi
.IP "7." 3
\f[B]Free list of all service descriptors\f[R] -
\f[I]cxil_free_svc_list()\f[R]
.IP
.nf
\f[C]
void cxil_free_svc_list(struct cxil_svc_list *svc_list);
\f[R]
.fi
.IP "8." 3
\f[B]Get resource usage information for a particular service\f[R] -
\f[I]cxil_get_svc_rsrc_use()\f[R]
.PP
If a valid service ID is passed into this function, information about
the resource usage by the associated service is stored into the provided
structure.
If no service is found with the provided ID, an error is returned.
.PP
Example:
.IP
.nf
\f[C]
int rc;
struct cxi_rsrc_use rsrc_use;
rc = cxil_get_svc(dev, CXI_DEFAULT_SVC_ID, &rsrc_use);
\f[R]
.fi
.IP "9." 3
\f[B]Get resource usage information for all services\f[R] -
\f[I]cxil_get_svc_rsrc_list()\f[R]
.PP
This function will query the driver for information regarding the
resources that are being utilized by each service associated with a
given device.
Memory will be allocated on the users behalf for the rsrc_use list.
The \[lq]count\[rq] field will indicate the number of rsrc_use structs
that have been copied in.
Must call \f[I]cxil_free_svc_rsrc_list()\f[R] to free memory during
cleanup.
.IP
.nf
\f[C]
struct cxil_svc_rsrc_list {
    unsigned int count;
    struct cxi_rsrc_use rsrcs[];
};
\f[R]
.fi
.IP
.nf
\f[C]
struct cxi_rsrc_use {
    unsigned int svc_id;
    uint16_t in_use[CXI_RSRC_TYPE_MAX];
};
\f[R]
.fi
.PP
Example:
.IP
.nf
\f[C]
int rc;
struct cxil_svc_rsrc_list *rsrc_list = NULL;
rc = cxil_get_svc_list(dev, &rsrc_list);
\f[R]
.fi
.IP "10." 4
\f[B]Free list of resource usage info\f[R] -
\f[I]cxil_free_svc_rsrc_list()\f[R]
.IP
.nf
\f[C]
void cxil_free_svc_rsrc_list(struct cxil_svc_rsrc_list *rsrc_list)
\f[R]
.fi
.IP "11." 4
\f[B]Enable/disable the CXI Service\f[R] - \f[I]cxil_svc_enable()\f[R]
.IP
.nf
\f[C]
int cxil_svc_enable(struct cxil_dev *dev_in, unsigned int svc_id,
                    bool enable)
\f[R]
.fi
.PP
To enable set the \[lq]enable\[rq] bool to true.
.IP
.nf
\f[C]
int rc;
rc = cxil_svc_enable(dev, svc_id, true);
\f[R]
.fi
.PP
To disable set the \[lq]enable\[rq] bool to false.
.IP
.nf
\f[C]
int rc;
rc = cxil_svc_enable(dev, svc_id, false);
\f[R]
.fi
.IP "12." 4
\f[B]Set exclusive_cp bit for a CXI Service\f[R] -
\f[I]cxil_svc_set_exclusive_cp()\f[R]
.PP
Set the \[lq]exclusive_cp\[rq] bit for a service.
.IP
.nf
\f[C]
int cxil_svc_set_exclusive_cp(struct cxil_dev *dev_in,
                              unsigned int svc_id,
                              bool exclusive_cp)
\f[R]
.fi
.IP "13." 4
\f[B]Get exclusive_cp bit for a CXI Service\f[R] -
\f[I]cxil_svc_get_exclusive_cp()\f[R]
.PP
Get the \[lq]exclusive_cp\[rq] bit for a service.
.IP
.nf
\f[C]
int cxil_svc_get_exclusive_cp(struct cxil_dev *dev_in,
                              unsigned int svc_id, bool *exclusive_cp)
\f[R]
.fi
.IP "14." 4
\f[B]Set a VNI range for a CXI Service\f[R] -
\f[I]cxil_svc_set_vni_range()\f[R]
.PP
Service ID of service to be updated.
Minimum VNI value (inclusive) Maximum VNI value (inclusive)
.IP
.nf
\f[C]
int cxil_svc_set_vni_range(struct cxil_dev *dev_in,
                           unsigned int svc_id, uint16_t vni_min,
                           uint16_t vni_max)
\f[R]
.fi
.IP "15." 4
\f[B]Get the VNI range for a CXI Service\f[R] -
\f[I]cxil_svc_get_vni_range()\f[R]
.PP
Get the VNI range associated with a service.
Service ID of service to query.
Pointer to store minimum VNI value (inclusive) Pointer to store maximum
VNI value (inclusive)
.IP
.nf
\f[C]
int cxil_svc_get_vni_range(struct cxil_dev *dev_in,
                           unsigned int svc_id, uint16_t *vni_min,
                           uint16_t *vni_max)
\f[R]
.fi
.SH FILES
.PP
\f[I]uapi/misc/cxi.h\f[R]
.IP
.nf
\f[C]
Where cxi service related structures are defined.
\f[R]
.fi
.PP
\f[I]libcxi.h\f[R]
.IP
.nf
\f[C]
Where cxi service related functions are defined.
\f[R]
.fi
.SH SEE ALSO
.PP
\f[B]cxi_service\f[R](1)
